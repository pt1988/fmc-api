# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VpnEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'Metadata',
        'extranet': 'bool',
        'description': 'str',
        'interface': 'IReference',
        'type': 'str',
        'connection_type': 'str',
        'version': 'str',
        'extranet_info': 'IVpnExtranetInfo',
        'protected_networks': 'IVpnProtectedNetwork',
        'natted_interface_address': 'str',
        'name': 'str',
        'links': 'ILinks',
        'id': 'str',
        'peer_type': 'str',
        'device': 'IReference',
        'ipv6_interface_address': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'extranet': 'extranet',
        'description': 'description',
        'interface': 'interface',
        'type': 'type',
        'connection_type': 'connectionType',
        'version': 'version',
        'extranet_info': 'extranetInfo',
        'protected_networks': 'protectedNetworks',
        'natted_interface_address': 'nattedInterfaceAddress',
        'name': 'name',
        'links': 'links',
        'id': 'id',
        'peer_type': 'peerType',
        'device': 'device',
        'ipv6_interface_address': 'ipv6InterfaceAddress'
    }

    def __init__(self, metadata=None, extranet=None, description=None, interface=None, type=None, connection_type=None, version=None, extranet_info=None, protected_networks=None, natted_interface_address=None, name=None, links=None, id=None, peer_type=None, device=None, ipv6_interface_address=None):  # noqa: E501
        """VpnEndpoint - a model defined in Swagger"""  # noqa: E501

        self._metadata = None
        self._extranet = None
        self._description = None
        self._interface = None
        self._type = None
        self._connection_type = None
        self._version = None
        self._extranet_info = None
        self._protected_networks = None
        self._natted_interface_address = None
        self._name = None
        self._links = None
        self._id = None
        self._peer_type = None
        self._device = None
        self._ipv6_interface_address = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if extranet is not None:
            self.extranet = extranet
        if description is not None:
            self.description = description
        if interface is not None:
            self.interface = interface
        if type is not None:
            self.type = type
        if connection_type is not None:
            self.connection_type = connection_type
        if version is not None:
            self.version = version
        if extranet_info is not None:
            self.extranet_info = extranet_info
        if protected_networks is not None:
            self.protected_networks = protected_networks
        if natted_interface_address is not None:
            self.natted_interface_address = natted_interface_address
        if name is not None:
            self.name = name
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if peer_type is not None:
            self.peer_type = peer_type
        if device is not None:
            self.device = device
        if ipv6_interface_address is not None:
            self.ipv6_interface_address = ipv6_interface_address

    @property
    def metadata(self):
        """Gets the metadata of this VpnEndpoint.  # noqa: E501


        :return: The metadata of this VpnEndpoint.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VpnEndpoint.


        :param metadata: The metadata of this VpnEndpoint.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def extranet(self):
        """Gets the extranet of this VpnEndpoint.  # noqa: E501


        :return: The extranet of this VpnEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._extranet

    @extranet.setter
    def extranet(self, extranet):
        """Sets the extranet of this VpnEndpoint.


        :param extranet: The extranet of this VpnEndpoint.  # noqa: E501
        :type: bool
        """

        self._extranet = extranet

    @property
    def description(self):
        """Gets the description of this VpnEndpoint.  # noqa: E501


        :return: The description of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VpnEndpoint.


        :param description: The description of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def interface(self):
        """Gets the interface of this VpnEndpoint.  # noqa: E501


        :return: The interface of this VpnEndpoint.  # noqa: E501
        :rtype: IReference
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this VpnEndpoint.


        :param interface: The interface of this VpnEndpoint.  # noqa: E501
        :type: IReference
        """

        self._interface = interface

    @property
    def type(self):
        """Gets the type of this VpnEndpoint.  # noqa: E501


        :return: The type of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VpnEndpoint.


        :param type: The type of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def connection_type(self):
        """Gets the connection_type of this VpnEndpoint.  # noqa: E501


        :return: The connection_type of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this VpnEndpoint.


        :param connection_type: The connection_type of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def version(self):
        """Gets the version of this VpnEndpoint.  # noqa: E501


        :return: The version of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VpnEndpoint.


        :param version: The version of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def extranet_info(self):
        """Gets the extranet_info of this VpnEndpoint.  # noqa: E501


        :return: The extranet_info of this VpnEndpoint.  # noqa: E501
        :rtype: IVpnExtranetInfo
        """
        return self._extranet_info

    @extranet_info.setter
    def extranet_info(self, extranet_info):
        """Sets the extranet_info of this VpnEndpoint.


        :param extranet_info: The extranet_info of this VpnEndpoint.  # noqa: E501
        :type: IVpnExtranetInfo
        """

        self._extranet_info = extranet_info

    @property
    def protected_networks(self):
        """Gets the protected_networks of this VpnEndpoint.  # noqa: E501


        :return: The protected_networks of this VpnEndpoint.  # noqa: E501
        :rtype: IVpnProtectedNetwork
        """
        return self._protected_networks

    @protected_networks.setter
    def protected_networks(self, protected_networks):
        """Sets the protected_networks of this VpnEndpoint.


        :param protected_networks: The protected_networks of this VpnEndpoint.  # noqa: E501
        :type: IVpnProtectedNetwork
        """

        self._protected_networks = protected_networks

    @property
    def natted_interface_address(self):
        """Gets the natted_interface_address of this VpnEndpoint.  # noqa: E501


        :return: The natted_interface_address of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._natted_interface_address

    @natted_interface_address.setter
    def natted_interface_address(self, natted_interface_address):
        """Sets the natted_interface_address of this VpnEndpoint.


        :param natted_interface_address: The natted_interface_address of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._natted_interface_address = natted_interface_address

    @property
    def name(self):
        """Gets the name of this VpnEndpoint.  # noqa: E501


        :return: The name of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VpnEndpoint.


        :param name: The name of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this VpnEndpoint.  # noqa: E501


        :return: The links of this VpnEndpoint.  # noqa: E501
        :rtype: ILinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VpnEndpoint.


        :param links: The links of this VpnEndpoint.  # noqa: E501
        :type: ILinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this VpnEndpoint.  # noqa: E501


        :return: The id of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VpnEndpoint.


        :param id: The id of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def peer_type(self):
        """Gets the peer_type of this VpnEndpoint.  # noqa: E501


        :return: The peer_type of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._peer_type

    @peer_type.setter
    def peer_type(self, peer_type):
        """Sets the peer_type of this VpnEndpoint.


        :param peer_type: The peer_type of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._peer_type = peer_type

    @property
    def device(self):
        """Gets the device of this VpnEndpoint.  # noqa: E501


        :return: The device of this VpnEndpoint.  # noqa: E501
        :rtype: IReference
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this VpnEndpoint.


        :param device: The device of this VpnEndpoint.  # noqa: E501
        :type: IReference
        """

        self._device = device

    @property
    def ipv6_interface_address(self):
        """Gets the ipv6_interface_address of this VpnEndpoint.  # noqa: E501


        :return: The ipv6_interface_address of this VpnEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_interface_address

    @ipv6_interface_address.setter
    def ipv6_interface_address(self, ipv6_interface_address):
        """Sets the ipv6_interface_address of this VpnEndpoint.


        :param ipv6_interface_address: The ipv6_interface_address of this VpnEndpoint.  # noqa: E501
        :type: str
        """

        self._ipv6_interface_address = ipv6_interface_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpnEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpnEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
