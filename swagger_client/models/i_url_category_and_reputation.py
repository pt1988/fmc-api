# coding: utf-8

"""
    Cisco Firepower Management Center Open API Specification

    **Specifies the REST URLs and methods supported in the Cisco Firepower Management Center API. Refer to the version specific [REST API Quick Start Guide](https://www.cisco.com/c/en/us/support/security/defense-center/products-programming-reference-guides-list.html) for additional information.**  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tac@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IUrlCategoryAndReputation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reputation': 'str',
        'type': 'str',
        'category': 'IURLCategory'
    }

    attribute_map = {
        'reputation': 'reputation',
        'type': 'type',
        'category': 'category'
    }

    def __init__(self, reputation=None, type=None, category=None):  # noqa: E501
        """IUrlCategoryAndReputation - a model defined in Swagger"""  # noqa: E501

        self._reputation = None
        self._type = None
        self._category = None
        self.discriminator = None

        if reputation is not None:
            self.reputation = reputation
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category

    @property
    def reputation(self):
        """Gets the reputation of this IUrlCategoryAndReputation.  # noqa: E501


        :return: The reputation of this IUrlCategoryAndReputation.  # noqa: E501
        :rtype: str
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this IUrlCategoryAndReputation.


        :param reputation: The reputation of this IUrlCategoryAndReputation.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNTRUSTED", "QUESTIONABLE", "NEUTRAL", "FAVORABLE", "TRUSTED"]  # noqa: E501
        if reputation not in allowed_values:
            raise ValueError(
                "Invalid value for `reputation` ({0}), must be one of {1}"  # noqa: E501
                .format(reputation, allowed_values)
            )

        self._reputation = reputation

    @property
    def type(self):
        """Gets the type of this IUrlCategoryAndReputation.  # noqa: E501


        :return: The type of this IUrlCategoryAndReputation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IUrlCategoryAndReputation.


        :param type: The type of this IUrlCategoryAndReputation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this IUrlCategoryAndReputation.  # noqa: E501


        :return: The category of this IUrlCategoryAndReputation.  # noqa: E501
        :rtype: IURLCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this IUrlCategoryAndReputation.


        :param category: The category of this IUrlCategoryAndReputation.  # noqa: E501
        :type: IURLCategory
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IUrlCategoryAndReputation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IUrlCategoryAndReputation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
